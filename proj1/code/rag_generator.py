"""This script was generated by ChatGPT and manually reviewed."""

import os
import faiss
import numpy as np
from sentence_transformers import SentenceTransformer

model = SentenceTransformer("all-MiniLM-L6-v2")
embedding_dim = model.get_sentence_embedding_dimension()

def get_text_embedding(text: str):
    return model.encode(text, convert_to_numpy=True)

def split_into_chunks(text: str):
    chunk_size = 180
    chunks = [text[i:i+chunk_size] for i in range(0, len(text), chunk_size)]
    return chunks

folder_path = "documents"
chunks = []
embeddings = []
metadata = []


def search(query, index, k=3):
    q_embedding = get_text_embedding(query).astype("float32").reshape(1, -1)
    distances, indices = index.search(q_embedding, k)
    
    results = []
    for idx, dist in zip(indices[0], distances[0]):
        results.append({
            "filename": metadata[idx][0],
            "paragraph_index": metadata[idx][1],
            "text": chunks[idx],
            "distance": float(dist)
        })
    return results

def build_index():
    for filename in os.listdir(folder_path):
        if filename.endswith(".txt"):
            file_path = os.path.join(folder_path, filename)
            with open(file_path, "r", encoding="utf-8") as f:
                text = f.read().strip()
                local_chunks = split_into_chunks(text)

                for i, chunk in enumerate(local_chunks):
                    embedding = get_text_embedding(chunk)
                    chunks.append(chunk)
                    embeddings.append(embedding)
                    metadata.append((filename, i))

    embeddings = np.array(embeddings).astype("float32")
    index = faiss.IndexFlatL2(embedding_dim)
    index.add(embeddings)
    print(f"FAISS index built with {index.ntotal} vectors.")
    return index


if __name__ == "__main__":
    index = build_index()
    query = search("I'm building a food delivery service, who are all the stakeholders?", index, k=6)

    with open("query.txt", "w") as f:
        print("You are a helpful assistant. Use the information in the context below to answer the question. \n\nContext:", file=f)
        for r in query:
            print(r["text"], file=f)
        print("Question: Tell me 5 ways needs of one stakeholder might clash/be irrelevant to another.", file=f)
